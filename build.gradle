import java.time.LocalDateTime
import java.time.ZoneId
import java.time.ZoneOffset

buildscript {
  // Load in our list of dependencies.
  //
  apply from: file("$rootDir/build_libraries.gradle")

  repositories {
    mavenCentral()
    google()
    jcenter()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:4.1.1'
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath "androidx.navigation:navigation-safe-args-gradle-plugin:${versions.androidx_navigation}"
    classpath "biz.aQute.bnd:biz.aQute.bnd.gradle:5.2.0"
    classpath "com.nabilhachicha:android-native-dependencies:0.1.2"
    classpath 'com.google.gms:google-services:4.3.4'
    classpath 'com.google.firebase:firebase-crashlytics-gradle:2.4.1'
    classpath "de.mannodermaus.gradle.plugins:android-junit5:1.7.1.1"
  }
}

plugins {
  id "com.github.ben-manes.versions" version "0.27.0"
  id "ru.vyarus.animalsniffer" version "1.5.0"
}

ext {
  nyplDrmEnabled =
    project.findProperty('org.thepalaceproject.drm.enabled') as Boolean

  if (nyplDrmEnabled) {
    awsAccessKeyId =
      project.property("org.thepalaceproject.aws.access_key_id")
    awsSecretKey =
      project.property("org.thepalaceproject.aws.secret_access_key")
  } else {
    awsAccessKeyId = ""
    awsSecretKey = ""
  }

  //
  // Check that non -SNAPSHOT builds don't use -SNAPSHOT dependencies.
  //

  final String versionName = project.ext["VERSION_NAME"];
  if (!versionName.endsWith("-SNAPSHOT")) {
    final Set<String> snapshots = new HashSet<>();
    ext.libraries.each { name, version ->
      if (version.toString().endsWith("-SNAPSHOT")) {
        snapshots.add(version.toString())
      }
    }

    if (!snapshots.isEmpty()) {
      final StringBuilder builder = new StringBuilder();
      builder.append("The current non-SNAPSHOT build (")
      builder.append(versionName)
      builder.append(") depends on the following -SNAPSHOT dependencies:")
      builder.append("\n")
      snapshots.each { version ->
        builder.append("  ")
        builder.append(version)
        builder.append("\n")
      }
      final String text = builder.toString()
      logger.error("{}", text)
      throw new GradleException(text);
    }
  }
}

subprojects {
  /*
   * We currently have transitive dependencies that specify dependencies on newer versions
   * of SLF4J. These are subtly incompatible with Logback-Android, and it will be a while before
   * new versions appear of both artifacts. Remove this when both are updated!
   */
  configurations.all {
    resolutionStrategy.force libraries.slf4j
  }

  /*
   * Ensure consistent R2 module versions.
   */

  configurations.all {
    resolutionStrategy.force libraries.r2_lcp
    resolutionStrategy.force libraries.r2_opds
    resolutionStrategy.force libraries.r2_shared
    resolutionStrategy.force libraries.r2_streamer
  }

  /*
   * Ensure consistent Kotlin versions.
   */

  configurations.all {
    resolutionStrategy.force libraries.kotlin_coroutines
    resolutionStrategy.force libraries.kotlin_coroutines_android
    resolutionStrategy.force libraries.kotlin_reflect
    resolutionStrategy.force libraries.kotlin_stdlib
    resolutionStrategy.force libraries.kotlin_stdlib_common
    resolutionStrategy.force libraries.kotlin_stdlib_jdk7
  }
}

subprojects { project ->
  group = project.ext["GROUP"]
  version = project.ext["VERSION_NAME"]

  switch (POM_PACKAGING) {
    case "aar":
      apply from: file("$rootDir/build_aar.gradle")
      break
    case "apk":
      apply from: file("$rootDir/build_apk.gradle")
      break
    case "jar":
      apply from: file("$rootDir/build_jar.gradle")
      break
    default:
      throw new IllegalStateException(
        "Unrecognized packaging type ${POM_PACKAGING} for ${project}")
  }

  /*
   * Configure publishing for the various project types.
   */

  switch (POM_PACKAGING) {
    case "jar":
      apply from: file("$rootDir/build_publishing.gradle")
      break
    case "apk":
      break
    case "aar":
      apply from: file("$rootDir/build_publishing.gradle")
      break
    default:
      throw new IllegalStateException(
        "Unrecognized packaging type ${POM_PACKAGING} for ${project}")
  }

  repositories {
    mavenLocal()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
    mavenCentral()
    google()

    /*
     * S3 repositories for restricted DRM artifacts.
     */

    if (nyplDrmEnabled) {
      maven {
        name = "S3 Snapshots"
        url = "s3://se-maven-repo/snapshots/"
        credentials(AwsCredentials) {
          accessKey = awsAccessKeyId
          secretKey = awsSecretKey
        }
        mavenContent {
          snapshotsOnly()
        }
      }

      maven {
        name = "S3 Releases"
        url = "s3://se-maven-repo/releases/"
        credentials(AwsCredentials) {
          accessKey = awsAccessKeyId
          secretKey = awsSecretKey
        }
        mavenContent {
          releasesOnly()
        }
      }
    }

    /*
     * LCP repository.
     */

    ivy {
      name = "LCP"
      url = uri('https://liblcp.dita.digital')
      patternLayout {
        artifact ("/[organisation]/[module]/android/aar/test/[revision].[ext]")
      }
      metadataSources {
        artifact()
      }
    }

    maven { url "http://maven.findawayworld.com/artifactory/libs-release/" }
    maven { url "https://jitpack.io" }
    jcenter()
  }

  // Skip tasks for projects that require drm; unless drm is enabled
  //
  def nyplDrmRequired =
    project.findProperty('org.thepalaceproject.drm.required') as Boolean
  if (nyplDrmRequired) {
    project.tasks.all { task ->
      task.onlyIf { nyplDrmEnabled }
    }
  }
}

/**
 * An empty task called by CI. We don't do semantic versioning analysis here yet.
 */
task verifySemanticVersioning {}

/**
 * Displays properties starting with 'org.librarysimplified'.
 */

task listProperties(group: 'NYPL') {
  description = "Displays properties starting with 'org.librarysimplified'."
  doLast {
    project.properties
      .findAll { p ->
        p.key.startsWith('org.librarysimplified')
      }
      .sort()
      .each { println(it) }
  }
}

/*
 * Add ktlint tasks.
 */

apply from: file("$rootDir/build_ktlint.gradle")

subprojects {
  assemble.dependsOn ktlint
}

/**
 * Expand the 'tilde' character to user.home.
 */
@SuppressWarnings('unused')
static String expandUserHome(String path) {
  if (path == null) return
  return path.replaceFirst("~", System.getProperty("user.home"))
}

@SuppressWarnings('unused')
static Integer calculateVersionCode(Project project) {
  def now = LocalDateTime.now(ZoneId.of("UTC"))
  def nowSeconds = now.toEpochSecond(ZoneOffset.UTC)
  // Seconds since 2021-03-15 09:20:00 UTC
  def nowReduced = nowSeconds - 1615800000
  return nowReduced
}
